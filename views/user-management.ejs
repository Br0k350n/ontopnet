<!DOCTYPE html>
<html lang="en">
    <%- include('partials/head', {title: "User Management", tag: "CoT Admin", isAdmin: true}); %>
<body>
    <%- include('partials/header', {session: session}); %>
    <style>
        .user-avatar {
            width: 80px;
            height: 80px;
            border-radius: 50%;
            display: block;
            margin: 0 auto 10px;
        }

        .modal-buttons {
            display: flex;
            justify-content: space-around;
            margin-top: 20px;
        }

        .password-btn, .warn-btn, .ban-btn {
            padding: 8px 12px;
            font-size: 14px;
            cursor: pointer;
            border-radius: 5px;
            border: none;
            color: white;
        }

        .password-btn { background-color: #007bff; }
        .warn-btn { background-color: #ffc107; }
        .ban-btn { background-color: #dc3545; }

        .password-btn:hover { background-color: #0056b3; }
        .warn-btn:hover { background-color: #d39e00; }
        .ban-btn:hover { background-color: #a71d2a; }

    </style>
    <div class="w-full layout-container lc-home">
        <div class="index-layout">
            <%- include('partials/admin-cat'); %>
            <div class="body-container">
                <main class="index-content">
                    <section class="content">
                        <h1 class="user-title">User Management</h1>
                        <!-- Charts Container -->
                        <div class="charts-container">
                            <canvas id="combinedChart"></canvas>
                        </div>
                    
                        <!-- User Table -->
                        <div class="table-container">
                            <table>
                                <thead>
                                    <tr>
                                        <th>#</th>
                                        <th>Username</th>
                                        <th>Email</th>
                                        <th>Discord</th>
                                        <th>Role</th>
                                        <th>Last Login</th>
                                        <th>Login Method</th>
                                        <th>IP</th> <!-- New column for IP -->
                                        <th>Referrer</th> <!-- New column for Referrer -->
                                        <th>Actions</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    <% users.forEach((user, index) => { 
                                        let referrer = user.referrer ? JSON.parse(user.referrer) : null;
                                    %>
                                        <tr>
                                            <td><%= index + 1 %></td>
                                            <td><%= user.username %></td>
                                            <td><%= user.email %></td>
                                            <td><%= user.discord_id || "Not linked" %></td>
                                            <td><%= user.isAdmin ? "Admin" : "User" %></td>
                                            <td><%= user.last_login ? new Date(user.last_login).toLocaleDateString() : "Never" %></td>
                                            <td><%= user.last_login_method || "N/A" %></td>
                                            <td><%= user.ip || "Not available" %></td> <!-- Display user's IP -->
                                            <td><%= referrer ? referrer.username : "No Referrer" %></td> <!-- Display user's referrer -->
                                            <td class="action-buttons">
                                                <button class="view-btn" onclick="viewUser('<%= user.id %>')">View</button>
                                            </td>
                                        </tr>
                                    <% }); %>
                                </tbody>
                            </table>
                        </div>

                        <!-- Pagination -->
                        <div class="pagination">
                            <% if (currentPage > 1) { %>
                                <button class="pagination-btn" onclick="changePage(<%= currentPage - 1 %>)">Previous</button>
                            <% } %>
                            
                            <% for (let i = 1; i <= totalPages; i++) { %>
                                <button class="pagination-btn <%= i === currentPage ? 'active' : '' %>" onclick="changePage(<%= i %>)"><%= i %></button>
                            <% } %>
                            
                            <% if (currentPage < totalPages) { %>
                                <button class="pagination-btn" onclick="changePage(<%= currentPage + 1 %>)">Next</button>
                            <% } %>
                        </div>
                    </section>
                </main>
                <%- include('partials/userModal'); %>
            </div> 
            
        </div>
        <div class="ctas space">
        
        </div>
    </div>
    <%- include('partials/footer'); %>

    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <script>
        // Declare current user's permission level (assumes session.user.isAdmin exists)
        const currentUserIsAdmin = <%= session.user.isAdmin %>;

        // Function to view user details
        function viewUser(userId) {
            // Show the modal
            const modal = document.getElementById("userModal");
            modal.style.display = "block";
        
            // Fetch user details
            fetch(`/admin/users/${userId}`)
                .then(response => response.json())
                .then(userData => {
                    const roleText = userData.isAdmin === 2 ? "Admin" : userData.isAdmin === 1 ? "Contractor" : "User";
                
                    // Populate the modal with user data
                    const modalUserDetails = document.getElementById("modalUserDetails");
                    const modalButtons = document.getElementById('modalButtons');
                    const lastActivity = userData.activity && userData.activity.length > 0 ? userData.activity[0] : null;
                    modalUserDetails.innerHTML = `
                        <img src="${userData.avatar || '/imgs/default-avatar.png'}" class="user-avatar" alt="User Avatar">
                        <p><strong>Username:</strong> ${userData.username}</p>
                        <p><strong>Email:</strong> ${userData.email}</p>
                        <p><strong>Discord:</strong> ${userData.discord_id || "Not linked"}</p>
                        <p><strong>Role:</strong> ${roleText}</p>
                        <p><strong>Last Login:</strong> ${lastActivity && lastActivity.timestamp ? new Date(lastActivity.timestamp).toLocaleDateString() : "Never"}</p>
                        <p><strong>Login Method:</strong> ${lastActivity && lastActivity.method ? lastActivity.method : "N/A"}</p>
                    `;
                
                    // Build the buttons HTML
                    let buttonsHTML = `
                        <button class="password-btn" onclick="changePassword(${userData.id})">Change Password</button>
                        <button class="warn-btn" onclick="warnUser(${userData.id})">Warn</button>
                        <button class="ban-btn" onclick="banUser(${userData.id})">Ban</button>
                    `;
                    // Only show the Set Permissions button if the current logged in user is an Admin
                    if (currentUserIsAdmin === 2) {
                        buttonsHTML += `<button class="set-permission-btn" onclick="openPermissionPopup(${userData.id}, ${userData.isAdmin})">Set Permissions</button>`;
                    }
                    modalButtons.innerHTML = buttonsHTML;
                });
        }

        // Functions for buttons
        function changePassword(userId) {
            const newPassword = prompt("Enter a new password:");
            if (newPassword) {
                fetch(`/admin/users/${userId}/change-password`, {
                    method: "POST",
                    headers: { "Content-Type": "application/json" },
                    body: JSON.stringify({ password: newPassword })
                }).then(() => alert("Password changed successfully!"));
            }
        }

        function warnUser(userId) {
            const warningMessage = prompt("Enter the reason for the warning:");
            if (warningMessage) {
                if (confirm("Are you sure you want to warn this user?")) {
                    fetch(`/admin/users/warn`, {
                        method: "POST",
                headers: { "Content-Type": "application/json" },
                body: JSON.stringify({ userId: userId, message: warningMessage })
            }).then(() => alert("User warned successfully!"));
                }
            } else {
                alert("Warning message cannot be empty.");
            }
        }

        function banUser(userId) {
            if (confirm("Are you sure you want to ban this user?")) {
                fetch(`/admin/users/${userId}/ban`, { method: "POST" })
                    .then(() => alert("User banned successfully!"));
            }
        }

        // Function to close the modal
        function closeModal() {
            const modal = document.getElementById("userModal");
            modal.style.display = "none";
        }

                // --- Added functions for setting permissions ---
                function openPermissionPopup(userId, currentLevel) {
    // Create the permission overlay container if it doesn't exist
    let permissionOverlay = document.getElementById("permissionOverlay");
    if (!permissionOverlay) {
        permissionOverlay = document.createElement("div");
        permissionOverlay.id = "permissionOverlay";
        permissionOverlay.innerHTML = `
            <div id="permissionPopup">
                <div class="permission-container">
                    <p><strong>Set Permission Level:</strong></p>
                    <select id="permissionSelect">
                        <option value="0">User</option>
                        <option value="1">Contractor</option>
                        <option value="2">Admin</option>
                    </select>
                    <button onclick="setUserPermission(${userId})">Submit</button>
                    <button onclick="closePermissionPopup()">Cancel</button>
                </div>
            </div>
        `;
        document.body.appendChild(permissionOverlay);
    } else {
        // Update the submit button to pass the current userId
        const submitBtn = permissionOverlay.querySelector("#permissionPopup button");
        if (submitBtn) {
            submitBtn.setAttribute("onclick", `setUserPermission(${userId})`);
        }
    }
    // Set the current permission level in the select dropdown
    document.getElementById("permissionSelect").value = currentLevel;
    permissionOverlay.style.display = "block";
}

function closePermissionPopup() {
    const permissionOverlay = document.getElementById("permissionOverlay");
    if (permissionOverlay) {
        permissionOverlay.style.display = "none";
    }
}


  function setUserPermission(userId) {
      const permissionSelect = document.getElementById("permissionSelect");
      const newPermission = permissionSelect.value;
      fetch('/admin/set-permission', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({ userId: userId, permissionLevel: newPermission })
      })
      .then(response => response.json())
      .then(data => {
          if (data.success) {
              alert("Permissions updated successfully!");
              closePermissionPopup();
          } else {
              alert("Error updating permissions: " + data.error);
          }
      })
      .catch(error => {
          console.error("Error:", error);
          alert("An error occurred while updating permissions.");
      });
  }
  

        const signupData = <%- JSON.stringify(signupData) %>;
        const loginData = <%- JSON.stringify(loginData) %>;
        const months = <%- JSON.stringify(months) %>; // Use the months array from the backend
    
        // Combined Chart
        const ctxCombined = document.getElementById('combinedChart').getContext('2d');
        new Chart(ctxCombined, {
            type: 'bar', // Base chart type
            data: {
                labels: months, // Use the months array as labels for the x-axis
                datasets: [
                    {
                        type: 'line', // Line chart for signups
                        label: 'New Signups',
                        data: signupData.data, // Use the mapped signup data
                        backgroundColor: 'rgba(54, 162, 235, 0.2)',
                        borderColor: 'rgba(54, 162, 235, 1)',
                        borderWidth: 2,
                        yAxisID: 'y', // Use the primary y-axis
                    },
                    {
                        type: 'line', // Bar chart for logins
                        label: 'Total Logins',
                        data: loginData.data, // Use the mapped login data
                        backgroundColor: 'rgba(75, 192, 192, 0.2)',
                        borderColor: 'rgba(75, 192, 192, 1)',
                        borderWidth: 2,
                        yAxisID: 'y', // Use the primary y-axis
                    }
                ]
            }
        });
    
        // Function to change page
        const changePage = function(page) {
            window.location.href = `/admin/users?page=${page}`;
        }
    </script>

    <style>
        /* Modal Styles */
        .modal {
            display: none; /* Hidden by default */
            position: fixed; /* Stay in place */
            z-index: 1000; /* Sit on top */
            left: 0;
            top: 0;
            width: 100%;
            height: 100%;
            overflow: auto; /* Enable scroll if needed */
            background-color: rgba(0, 0, 0, 0.5); /* Black background with opacity */
        }

        .modal-content {
            background-color: #fff;
            margin: 10% auto; /* 10% from the top and centered */
            padding: 20px;
            border: 1px solid #888;
            border-radius: 8px;
            width: 832px; /* Adjust width as needed */
            height: 400px;
        }

        .close {
            color: #aaa;
            float: right;
            font-size: 28px;
            font-weight: bold;
            cursor: pointer;
        }
                
        .close:hover,
        .close:focus {
            color: #000;
            text-decoration: none;
        }

        #modalUserDetails {
            margin-top: 20px;
        }

        #modalUserDetails p {
            margin: 10px 0;
            font-size: 16px;
        }
        .charts-container {
            display: flex;
            justify-content: space-between;
            gap: 20px;
            margin-bottom: 20px;
            width: 100%;
        }

        .table-container {
            width: 100%;
            overflow-x: auto; /* Add horizontal scroll if needed */
        }

        table {
            width: 100%;
            border-collapse: collapse;
            font-size: 14px; /* Smaller font size */
        }

        table th, table td {
            padding: 8px; /* Smaller padding */
            text-align: left;
        }

        .action-buttons .view-btn {
            padding: 5px 10px; /* Smaller button */
            font-size: 12px; /* Smaller font size */
        }

        .pagination {
            display: flex;
            justify-content: center;
            gap: 5px;
            margin-top: 20px;
        }

        .pagination-btn {
            padding: 5px 10px;
            border: 1px solid #ccc;
            background-color: #fff;
            cursor: pointer;
        }

        .pagination-btn.active {
            background-color: #007bff;
            color: #fff;
            border-color: #007bff;
        }
    </style>
</body>
</html>